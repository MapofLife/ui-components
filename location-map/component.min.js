/*! 2015-11-20 */
angular.module("mol-location-map-templates",[]).run(["$templateCache",function($templateCache){$templateCache.put("mol-location-map-main.html","<leaflet paths=paths markers=markers center=center bounds=bounds width={{width}} layers=layers controls defaults=defaults height={{height}}></leaflet>")}]),function(){var cssText=".angular-leaflet-map svg{width:initial;height:initial}",styleEl=document.createElement("style");if(document.getElementsByTagName("head")[0].appendChild(styleEl),styleEl.styleSheet)styleEl.styleSheet.disabled||(styleEl.styleSheet.cssText=cssText);else try{styleEl.innerHTML=cssText}catch(e){styleEl.innerText=cssText}}(),angular.module("mol.location-map",["mol-location-map-templates"]).directive("molLocationMap",["MOLApiX","$state","$http","leafletData","leafletBoundsHelpers",function(MOLApiX,$state,$http,leafletData,leafletBoundsHelpers){return{restrict:"AE",scope:{constraints:"=constraints",statistics:"=statistics",width:"=width",height:"=height"},templateUrl:"mol-location-map-main.html",link:function(scope,element,attr,leafletData){},controller:function($scope,$state,$http,$element,leafletData,MOLApiX){addResizeListener($element.context,function(){leafletData.getMap().then(function(map){map.invalidateSize()})}),angular.extend($scope,{markers:{},defaults:{scrollWheelZoom:!0},center:{lat:0,lng:0,zoom:2},controls:{scale:!0,layers:!0,draw:{draw:{},edit:{featureGroup:new L.FeatureGroup,remove:!1}}},paths:{},bounds:{},layers:{baselayers:{positron:{name:"Positron",type:"xyz",url:"http://cartodb-basemaps-{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",layerOptions:{subdomains:["a","b","c"],attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="http://cartodb.com/attributions">CartoDB</a>',continuousWorld:!1},errorTileUrl:"/app/img/blank_tile.png"}},overlays:{draw:{name:"draw",type:"group",visible:!0,layerParams:{showOnSelector:!1}}}}}),$scope.setRegion=function(region){var theBounds=getBounds(region);region=angular.extend(region,{bounds:theBounds}),$scope.constraints.region=region,$scope.bounds=theBounds},$scope.getBounds=function(region){return region.extent?leafletBoundsHelpers.createBoundsFromArray([[region.extent.coordinates[0][2][1],region.extent.coordinates[0][2][0]],[region.extent.coordinates[0][0][1],region.extent.coordinates[0][0][0]]]):void 0},$scope.$watch("constraints",function(newValue,oldValue){newValue&&$scope.updateConstraints(newValue)},!0),$scope.updateConstraints=function(constraints){var params={};angular.forEach(constraints,function(val,key){try{params[key]=val.filter(function(i){return parseInt(i)>=0?!0:!1}).join(",")}catch(e){params[key]=val}}),$http({withCredentials:!1,method:"POST",url:"https://mol.cartodb.com/api/v1/map/named/display_region",data:params.region}).then(function(result,status,headers,config){$scope.layers.overlays.regionBoundary={type:"utfGrid",url:"//d3dvrpov25vfw0.cloudfront.net/api/v1/map/{0}/0/{z}/{x}/{y}.grid.json?callback={cb}".format(result.data.layergroupid),layerOptions:{attribution:"©2015 Map of Life",continuousWorld:!1},name:"display_region",opacity:.8,refresh:!0,doRefresh:!0,errorTileUrl:"/app/img/blank_tile.png",visible:!0,key:result.data.layergroupid,user:"mol",layer:"0"},void 0==$scope.bounds&&constraints.region.extent&&($scope.bounds=$scope.constraints.region.bounds)}),$http({withCredentials:!1,method:"GET",url:"/api/mountain_region/maps",params:params}).then(function(result,status,headers,config){$scope.statistics=result.data.stats,$scope.layers.overlays.refinedRegion={type:"xyz",url:"https://earthengine.googleapis.com/map/{0}/{z}/{x}/{y}?token={1}".format(result.data.id,result.data.token),layerOptions:{attribution:"©2015 Map of Life",continuousWorld:!1},name:"display_region",opacity:.8,refresh:!0,doRefresh:!0,errorTileUrl:"/app/img/blank_tile.png",visible:!0}})},$scope.$on("leafletDirectiveMap.utfgridClick",function(event,args){null!=args.data&&(args.data.extent=angular.fromJson(args.data.extent),$scope.constraints=angular.extend($scope.constraints,{palette:"tvz",region:{id:args.data.id,name:args.data.name,type:"mountain_region",bounds:$scope.getBounds(args.data)}}),$scope.bounds=$scope.getBounds(args.data))}),leafletData.getMap().then(function(map){leafletData.getLayers().then(function(baselayers){var drawnItems=baselayers.overlays.draw,drawControl=new L.Control.Draw({edit:{featureGroup:drawnItems},position:"topright"});map.on("draw:created",function(e){var layer=e.layer;drawnItems.addLayer(layer),console.log(JSON.stringify(layer.toGeoJSON()))}),map.addControl(drawControl)})})}}}]);